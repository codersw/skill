<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.skill.manager.mapper.UmProjectEquipmentMapper">

    <resultMap type="UmProjectEquipment" id="UmProjectEquipmentResult">
        <result property="id"    column="id"    />
        <result property="projectId"    column="project_id"    />
        <result property="equipmentId"    column="equipment_id"    />
    </resultMap>

    <sql id="selectUmProjectEquipmentVo">
        select upe.id, upe.project_id, upe.equipment_id,p.project_name projectName,equ.equipment_name equipmentName
        from um_project_equipment upe
        left join um_codelist_project p on upe.project_id = p.project_id
        left join um_equipment equ on upe.equipment_id = equ.equipment_id
    </sql>

    <select id="selectUmProjectEquipmentList" parameterType="UmProjectEquipment" resultMap="UmProjectEquipmentResult">
        <include refid="selectUmProjectEquipmentVo"/>
        <where>
            <if test="equipmentId != null  and equipmentId != ''">  and upe.equipment_id = #{equipmentId}</if>
        </where>
    </select>

    <select id="selectUmProjectEquipmentById" parameterType="String" resultMap="UmProjectEquipmentResult">
        <include refid="selectUmProjectEquipmentVo"/>
        where upe.id = #{id}
    </select>

    <select id="selectUmProjectEquipmentByprojectIdlist" parameterType="UmProjectEquipment" resultMap="UmProjectEquipmentResult">
        SELECT equipment_id FROM um_project_equipment WHERE project_id=#{projectId}
    </select>

    <insert id="insertUmProjectEquipment" parameterType="UmProjectEquipment">
        insert into um_project_equipment
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null  and id != ''">id,</if>
            <if test="projectId != null  and projectId != ''">project_id,</if>
            <if test="equipmentId != null  and equipmentId != ''">equipment_id,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null  and id != ''">#{id},</if>
            <if test="projectId != null  and projectId != ''">#{projectId},</if>
            <if test="equipmentId != null  and equipmentId != ''">#{equipmentId},</if>
         </trim>
    </insert>

    <update id="updateUmProjectEquipment" parameterType="UmProjectEquipment">
        update um_project_equipment
        <trim prefix="SET" suffixOverrides=",">
            <if test="projectId != null  and projectId != ''">project_id = #{projectId},</if>
            <if test="equipmentId != null  and equipmentId != ''">equipment_id = #{equipmentId},</if>
        </trim>
        where id = #{id}
    </update>

    <!--逻辑删除时使用该语句
    <update id="deleteUmProjectEquipmentByIds" parameterType="String">
        update um_project_equipment
        <trim prefix="SET" suffixOverrides=",">
            status = '1'
        </trim>
        where  id in
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>-->

    <delete id="deleteUmProjectEquipmentById" parameterType="String">
        delete from um_project_equipment where id = #{id}
    </delete>

    <delete id="deleteUmProjectEquipmentByprojectId" parameterType="String">
        delete from um_project_equipment where project_id=#{projectId}
    </delete>

    <delete id="deleteUmProjectEquipmentByIds" parameterType="String">
        delete from um_project_equipment where id in
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>
    <delete id="deleteUmProjectEquipmentByEquIds" parameterType="String">
        delete from um_project_equipment where equipment_id in
        <foreach item="equipmentId" collection="array" open="(" separator="," close=")">
            #{equipmentId}
        </foreach>
    </delete>

</mapper>